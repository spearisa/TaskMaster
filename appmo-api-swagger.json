{
  "openapi": "3.0.0",
  "info": {
    "title": "Appmo API",
    "description": "API for Appmo task management platform",
    "version": "1.0.0",
    "contact": {
      "name": "Appmo Support",
      "url": "https://appmo.com/support",
      "email": "support@appmo.com"
    }
  },
  "servers": [
    {
      "url": "https://api.appmo.com",
      "description": "Production server"
    },
    {
      "url": "https://staging.api.appmo.com",
      "description": "Staging server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints"
    },
    {
      "name": "Tasks",
      "description": "Task management endpoints"
    },
    {
      "name": "Templates",
      "description": "Task template management endpoints"
    },
    {
      "name": "Bidding",
      "description": "Task bidding endpoints"
    },
    {
      "name": "Messaging",
      "description": "Direct messaging endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "AI",
      "description": "AI assistant integration endpoints"
    },
    {
      "name": "API Keys",
      "description": "API key management endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Use an API key or session token for authentication"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key must be prefixed with 'Bearer '"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "displayName": {
            "type": "string",
            "example": "John Doe"
          },
          "bio": {
            "type": "string",
            "example": "I'm a productivity enthusiast who loves trying new task management methods."
          },
          "interests": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["productivity", "technology", "time management"]
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["organization", "planning", "prioritization"]
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-07T17:32:33.772Z"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Finish Closet doors"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Finish closet doors in bedroom and bathroom"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2025-04-29T05:00:00.000Z"
          },
          "completed": {
            "type": "boolean",
            "example": false
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "priority": {
            "type": "string",
            "enum": ["high", "medium", "low"],
            "example": "medium"
          },
          "category": {
            "type": "string",
            "example": "Work"
          },
          "estimatedTime": {
            "type": "integer",
            "nullable": true,
            "example": 2
          },
          "userId": {
            "type": "integer",
            "example": 1
          },
          "assignedToUserId": {
            "type": "integer",
            "nullable": true,
            "example": null
          },
          "isPublic": {
            "type": "boolean",
            "example": true
          },
          "biddingEnabled": {
            "type": "boolean",
            "example": false
          },
          "biddingDeadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "minBid": {
            "type": "number",
            "nullable": true,
            "example": null
          },
          "maxBid": {
            "type": "number",
            "nullable": true,
            "example": null
          },
          "winningBidId": {
            "type": "integer",
            "nullable": true,
            "example": null
          }
        }
      },
      "TaskTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Weekly Progress Report"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Prepare weekly progress report for the management team"
          },
          "priority": {
            "type": "string",
            "enum": ["high", "medium", "low"],
            "example": "medium"
          },
          "category": {
            "type": "string",
            "example": "Work"
          },
          "estimatedTime": {
            "type": "integer",
            "nullable": true,
            "example": 2
          },
          "userId": {
            "type": "integer",
            "example": 1
          },
          "isPublic": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-07T17:32:33.772Z"
          }
        }
      },
      "TaskBid": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "taskId": {
            "type": "integer",
            "example": 10
          },
          "bidderId": {
            "type": "integer",
            "example": 2
          },
          "amount": {
            "type": "number",
            "example": 50.00
          },
          "proposal": {
            "type": "string",
            "example": "I can complete this task efficiently and with high quality."
          },
          "estimatedTime": {
            "type": "integer",
            "nullable": true,
            "example": 3
          },
          "status": {
            "type": "string",
            "enum": ["pending", "accepted", "rejected", "completed"],
            "example": "pending"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-10T18:45:33.772Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-10T18:45:33.772Z"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "senderId": {
            "type": "integer",
            "example": 1
          },
          "receiverId": {
            "type": "integer",
            "example": 2
          },
          "content": {
            "type": "string",
            "example": "Hello, I'm interested in your task."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-10T19:23:15.772Z"
          },
          "read": {
            "type": "boolean",
            "example": false
          },
          "delivered": {
            "type": "boolean",
            "example": true
          },
          "reactions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "example": {
              "üëç": [1],
              "‚ù§Ô∏è": [2]
            }
          },
          "deleted": {
            "type": "boolean",
            "example": false
          },
          "edited": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "example": 2
          },
          "lastMessage": {
            "type": "string",
            "example": "Hello, I'm interested in your task."
          },
          "unreadCount": {
            "type": "integer",
            "example": 3
          },
          "lastMessageTime": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-10T19:23:15.772Z"
          }
        }
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "key": {
            "type": "string",
            "example": "appmo_api_key_123456789abcdef"
          },
          "name": {
            "type": "string",
            "example": "Development API Key"
          },
          "userId": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-08T14:32:11.772Z"
          },
          "lastUsedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2025-04-10T09:45:22.123Z"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "revoked": {
            "type": "string",
            "enum": ["yes", "no"],
            "example": "no"
          }
        }
      }
    }
  },
  "paths": {
    "/api/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Create a new user account with username and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "securepassword123"
                  },
                  "displayName": {
                    "type": "string",
                    "example": "John Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or username already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Log in a user",
        "description": "Authenticate a user with username and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "securepassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Log out the current user",
        "description": "End the user's session",
        "responses": {
          "200": {
            "description": "User logged out successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user data",
        "description": "Retrieve information about the currently authenticated user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/search": {
      "get": {
        "tags": ["Users"],
        "summary": "Search for users",
        "description": "Search for users by username, display name, interests, or skills",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query string",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/{userId}/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user profile",
        "description": "Retrieve a user's public profile information",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/profile": {
      "put": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "description": "Update the current user's profile information",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "bio": {
                    "type": "string",
                    "example": "Task management enthusiast and productivity expert."
                  },
                  "interests": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["productivity", "technology", "time management"]
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["organization", "planning", "prioritization"]
                  },
                  "avatarUrl": {
                    "type": "string",
                    "nullable": true,
                    "example": "https://example.com/avatar.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all tasks for current user",
        "description": "Retrieve all tasks created by or assigned to the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a new task",
        "description": "Create a new task for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Finish Closet doors"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "example": "Finish closet doors in bedroom and bathroom"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2025-04-29T05:00:00.000Z"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["high", "medium", "low"],
                    "example": "medium"
                  },
                  "category": {
                    "type": "string",
                    "example": "Work"
                  },
                  "estimatedTime": {
                    "type": "integer",
                    "nullable": true,
                    "example": 2
                  },
                  "assignedToUserId": {
                    "type": "integer",
                    "nullable": true,
                    "example": null
                  },
                  "isPublic": {
                    "type": "boolean",
                    "example": false
                  },
                  "biddingEnabled": {
                    "type": "boolean",
                    "example": false
                  },
                  "biddingDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": null
                  },
                  "minBid": {
                    "type": "number",
                    "nullable": true,
                    "example": null
                  },
                  "maxBid": {
                    "type": "number",
                    "nullable": true,
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a specific task",
        "description": "Retrieve a specific task by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to view this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a task",
        "description": "Update an existing task",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Finish Closet doors"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "example": "Finish closet doors in bedroom and bathroom"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2025-04-29T05:00:00.000Z"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["high", "medium", "low"],
                    "example": "medium"
                  },
                  "category": {
                    "type": "string",
                    "example": "Work"
                  },
                  "estimatedTime": {
                    "type": "integer",
                    "nullable": true,
                    "example": 2
                  },
                  "assignedToUserId": {
                    "type": "integer",
                    "nullable": true,
                    "example": null
                  },
                  "isPublic": {
                    "type": "boolean",
                    "example": false
                  },
                  "biddingEnabled": {
                    "type": "boolean",
                    "example": false
                  },
                  "biddingDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": null
                  },
                  "minBid": {
                    "type": "number",
                    "nullable": true,
                    "example": null
                  },
                  "maxBid": {
                    "type": "number",
                    "nullable": true,
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to update this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task",
        "description": "Delete an existing task",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to delete this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{id}/complete": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Mark a task as complete",
        "description": "Mark an existing task as completed",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task marked as complete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to complete this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{id}/assign": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Assign a task to a user",
        "description": "Assign an existing task to another user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assignedToUserId"],
                "properties": {
                  "assignedToUserId": {
                    "type": "integer",
                    "example": 2
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to assign this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{id}/public": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Toggle a task's public visibility",
        "description": "Make a task public or private",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["isPublic"],
                "properties": {
                  "isPublic": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task visibility updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to update this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{id}/delegate": {
      "post": {
        "tags": ["AI", "Tasks"],
        "summary": "Delegate a task to AI",
        "description": "Delegate a task to the AI assistant for detailed completion steps",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string",
                    "example": "Please focus on providing detailed steps with examples."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task delegation response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string",
                      "example": "Here are the detailed steps to complete your task: 1. First, gather all necessary materials including..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to delegate this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/public-tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all public tasks",
        "description": "Retrieve all public tasks from all users",
        "responses": {
          "200": {
            "description": "Public tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/shared-task/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a shared task by ID",
        "description": "Retrieve a specific shared task by ID without requiring authentication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found or not public"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/{userId}/public-tasks": {
      "get": {
        "tags": ["Tasks", "Users"],
        "summary": "Get public tasks for a specific user",
        "description": "Retrieve all public tasks created by a specific user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/task-templates": {
      "get": {
        "tags": ["Templates"],
        "summary": "Get all task templates for the current user",
        "description": "Retrieve all task templates created by the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Task templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": ["Templates"],
        "summary": "Create a new task template",
        "description": "Create a new task template for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Weekly Progress Report"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "example": "Prepare weekly progress report for the management team"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["high", "medium", "low"],
                    "example": "medium"
                  },
                  "category": {
                    "type": "string",
                    "example": "Work"
                  },
                  "estimatedTime": {
                    "type": "integer",
                    "nullable": true,
                    "example": 2
                  },
                  "isPublic": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/task-templates/{id}": {
      "put": {
        "tags": ["Templates"],
        "summary": "Update a task template",
        "description": "Update an existing task template",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Weekly Progress Report"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "example": "Prepare weekly progress report for the management team"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["high", "medium", "low"],
                    "example": "medium"
                  },
                  "category": {
                    "type": "string",
                    "example": "Work"
                  },
                  "estimatedTime": {
                    "type": "integer",
                    "nullable": true,
                    "example": 2
                  },
                  "isPublic": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to update this template"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["Templates"],
        "summary": "Delete a task template",
        "description": "Delete an existing task template",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task template deleted successfully"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to delete this template"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/task-templates/{id}/public": {
      "post": {
        "tags": ["Templates"],
        "summary": "Toggle a template's public visibility",
        "description": "Make a task template public or private",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["isPublic"],
                "properties": {
                  "isPublic": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template visibility updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to update this template"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/task-templates/{id}/create-task": {
      "post": {
        "tags": ["Templates", "Tasks"],
        "summary": "Create a task from a template",
        "description": "Create a new task using an existing template",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dueDate": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2025-04-29T05:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully from template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to use this template"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}/bids": {
      "get": {
        "tags": ["Bidding"],
        "summary": "Get bids for a task",
        "description": "Retrieve all bids for a specific task",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bids retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskBid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to view bids for this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}/bid": {
      "post": {
        "tags": ["Bidding"],
        "summary": "Place a bid on a task",
        "description": "Submit a bid for a task that has bidding enabled",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["amount", "proposal"],
                "properties": {
                  "amount": {
                    "type": "number",
                    "example": 50.00
                  },
                  "proposal": {
                    "type": "string",
                    "example": "I can complete this task efficiently and with high quality."
                  },
                  "estimatedTime": {
                    "type": "integer",
                    "nullable": true,
                    "example": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bid placed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBid"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or bidding not enabled for this task"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user cannot bid on their own task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}/bids/{bidId}/accept": {
      "post": {
        "tags": ["Bidding"],
        "summary": "Accept a bid",
        "description": "Accept a bid for a task as the task owner",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bidId",
            "in": "path",
            "description": "Bid ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bid accepted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user is not the task owner"
          },
          "404": {
            "description": "Task or bid not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/tasks/{taskId}/create-payment-intent": {
      "post": {
        "tags": ["Bidding", "Payment"],
        "summary": "Create a payment intent for a task bid",
        "description": "Create a Stripe payment intent for accepting a bid",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["bidId"],
                "properties": {
                  "bidId": {
                    "type": "integer",
                    "example": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment intent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "clientSecret": {
                      "type": "string",
                      "example": "pi_3MqYuiDEQNFVYY7Y1KzkbLcZ_secret_QqcCGaD0IPeH5kRNQMX5QEqt5"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or bid"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user is not the task owner"
          },
          "404": {
            "description": "Task or bid not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/bids/received": {
      "get": {
        "tags": ["Bidding"],
        "summary": "Get bids received on user's tasks",
        "description": "Retrieve all bids received on tasks owned by the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Received bids retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bid": {
                        "$ref": "#/components/schemas/TaskBid"
                      },
                      "task": {
                        "$ref": "#/components/schemas/Task"
                      },
                      "bidder": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/bids/placed": {
      "get": {
        "tags": ["Bidding"],
        "summary": "Get bids placed by the current user",
        "description": "Retrieve all bids placed by the current user on others' tasks",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Placed bids retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bid": {
                        "$ref": "#/components/schemas/TaskBid"
                      },
                      "task": {
                        "$ref": "#/components/schemas/Task"
                      },
                      "owner": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/bids/{bidId}/accept": {
      "post": {
        "tags": ["Bidding"],
        "summary": "Accept a bid (alternative endpoint)",
        "description": "Accept a bid by its ID (alternative to task-specific endpoint)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bidId",
            "in": "path",
            "description": "Bid ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bid accepted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user is not the task owner"
          },
          "404": {
            "description": "Bid not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/bids/{bidId}/reject": {
      "post": {
        "tags": ["Bidding"],
        "summary": "Reject a bid",
        "description": "Reject a bid for a task as the task owner",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bidId",
            "in": "path",
            "description": "Bid ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bid rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBid"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user is not the task owner"
          },
          "404": {
            "description": "Bid not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/conversations": {
      "get": {
        "tags": ["Messaging"],
        "summary": "Get user conversations",
        "description": "Retrieve all conversations for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "conversation": {
                        "$ref": "#/components/schemas/Conversation"
                      },
                      "user": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/messages/{otherUserId}": {
      "get": {
        "tags": ["Messaging"],
        "summary": "Get messages with a user",
        "description": "Retrieve all messages between the current user and another user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "otherUserId",
            "in": "path",
            "description": "ID of the other user in the conversation",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/messages": {
      "post": {
        "tags": ["Messaging"],
        "summary": "Send a message",
        "description": "Send a message to another user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["receiverId", "content"],
                "properties": {
                  "receiverId": {
                    "type": "integer",
                    "example": 2
                  },
                  "content": {
                    "type": "string",
                    "example": "Hello, I'm interested in your task."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "404": {
            "description": "Recipient not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/messages/{messageId}/reactions": {
      "post": {
        "tags": ["Messaging"],
        "summary": "Add a reaction to a message",
        "description": "Add an emoji reaction to a message",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["emoji"],
                "properties": {
                  "emoji": {
                    "type": "string",
                    "example": "üëç"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user cannot react to this message"
          },
          "404": {
            "description": "Message not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/messages/{messageId}/reactions/{emoji}": {
      "delete": {
        "tags": ["Messaging"],
        "summary": "Remove a reaction from a message",
        "description": "Remove an emoji reaction from a message",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "emoji",
            "in": "path",
            "description": "Emoji to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user cannot remove this reaction"
          },
          "404": {
            "description": "Message or reaction not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/messages/{messageId}": {
      "put": {
        "tags": ["Messaging"],
        "summary": "Edit a message",
        "description": "Edit the content of a message",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content"],
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "Hello, I'm very interested in your task."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user cannot edit this message"
          },
          "404": {
            "description": "Message not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["Messaging"],
        "summary": "Delete a message",
        "description": "Soft delete a message (mark as deleted)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user cannot delete this message"
          },
          "404": {
            "description": "Message not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/messages/{messageId}/delivered": {
      "post": {
        "tags": ["Messaging"],
        "summary": "Mark a message as delivered",
        "description": "Mark a message as delivered to the recipient",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message marked as delivered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user cannot mark this message as delivered"
          },
          "404": {
            "description": "Message not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/messages/{otherUserId}/read": {
      "post": {
        "tags": ["Messaging"],
        "summary": "Mark messages as read",
        "description": "Mark all messages from another user as read",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "otherUserId",
            "in": "path",
            "description": "ID of the other user in the conversation",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages marked as read"
          },
          "401": {
            "description": "Not authenticated"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ai/task-suggestions": {
      "get": {
        "tags": ["AI"],
        "summary": "Get AI task suggestions",
        "description": "Get AI-generated suggestions for optimizing task management",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Task suggestions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "suggestions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Consider grouping your work tasks for better focus",
                        "You have several high-priority tasks due tomorrow",
                        "Try batch-processing similar tasks for efficiency"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ai/task-reminder/{id}": {
      "get": {
        "tags": ["AI"],
        "summary": "Get AI task reminder",
        "description": "Get AI-generated reminder for a specific task",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task reminder retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reminder": {
                      "type": "string",
                      "example": "Don't forget to finish your closet doors project by April 29th. You estimated it would take 2 hours, so consider scheduling some time this weekend."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not have permission to view this task"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ai/daily-schedule": {
      "get": {
        "tags": ["AI"],
        "summary": "Get AI-generated daily schedule",
        "description": "Get an AI-optimized daily schedule based on user's tasks",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Daily schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schedule": {
                      "type": "string",
                      "example": "Here's your optimized schedule for today:\n9:00 AM - 10:30 AM: Work on high-priority task 'Finish report'\n10:45 AM - 11:15 AM: Take a break\n11:15 AM - 12:30 PM: Complete 'Email clients' task\n..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ai/chat": {
      "post": {
        "tags": ["AI"],
        "summary": "Chat with AI assistant",
        "description": "Send a message to the AI assistant and get a response",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["prompt"],
                "properties": {
                  "prompt": {
                    "type": "string",
                    "example": "How can I improve my time management skills?"
                  },
                  "useModel": {
                    "type": "string",
                    "enum": ["openai", "anthropic"],
                    "example": "openai"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AI response received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string",
                      "example": "To improve your time management skills, I recommend the following strategies: 1. Use the Pomodoro Technique..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ai/generate": {
      "post": {
        "tags": ["AI"],
        "summary": "Generate text with AI",
        "description": "Generate text content using AI models",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["prompt", "type"],
                "properties": {
                  "prompt": {
                    "type": "string",
                    "example": "Write a professional email requesting a deadline extension"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["email", "document", "summary", "other"],
                    "example": "email"
                  },
                  "useModel": {
                    "type": "string",
                    "enum": ["openai", "anthropic"],
                    "example": "openai"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AI-generated text received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "generated_text": {
                      "type": "string",
                      "example": "Subject: Request for Deadline Extension\n\nDear [Name],\n\nI hope this email finds you well. I am writing to request an extension for the [Project Name] deadline..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ai/image": {
      "post": {
        "tags": ["AI"],
        "summary": "Generate an image with AI",
        "description": "Generate an image using OpenAI's DALL-E",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["prompt"],
                "properties": {
                  "prompt": {
                    "type": "string",
                    "example": "A futuristic productivity workspace with a holographic display showing task lists"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "https://oaidalleapiprodscus.blob.core.windows.net/private/org-..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ai/code": {
      "post": {
        "tags": ["AI"],
        "summary": "Generate code with AI",
        "description": "Generate code snippets using AI",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["prompt", "language"],
                "properties": {
                  "prompt": {
                    "type": "string",
                    "example": "Create a function that sorts an array of objects by a specific property"
                  },
                  "language": {
                    "type": "string",
                    "example": "javascript"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "function sortByProperty(array, property) {\n  return [...array].sort((a, b) => {\n    if (a[property] < b[property]) return -1;\n    if (a[property] > b[property]) return 1;\n    return 0;\n  });\n}"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/keys": {
      "get": {
        "tags": ["API Keys"],
        "summary": "Get all API keys",
        "description": "Retrieve all API keys for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "API keys retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": ["API Keys"],
        "summary": "Create a new API key",
        "description": "Generate a new API key for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Development API Key"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/keys/{id}": {
      "delete": {
        "tags": ["API Keys"],
        "summary": "Revoke an API key",
        "description": "Revoke an existing API key",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "API key ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key revoked successfully"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Forbidden - user does not own this API key"
          },
          "404": {
            "description": "API key not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/verify-key": {
      "get": {
        "tags": ["API Keys"],
        "summary": "Verify an API key",
        "description": "Verify if an API key is valid",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "API key is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "example": true
                    },
                    "userId": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or revoked API key"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/google": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate with Google",
        "description": "Authenticate a user with Google credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["credential"],
                "properties": {
                  "credential": {
                    "type": "string",
                    "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjI..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  }
}